/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dack;


import java.beans.Statement;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author nguyen tran hoa
 */
public class frm_DKHP extends javax.swing.JFrame {
//   private static final String DB_URL = "jdbc:sqlserver://localhost:1433;databaseName=DACK;encrypt=true;trustServerCertificate=true";
//    private static final String DB_USERNAME = "nhonnguyen299";
//    private static final String DB_PASSWORD = "123456";
    /**
     * Creates new form frm_DKHP
     */
    public frm_DKHP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtMaSV = new javax.swing.JTextField();
        txtMaHP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nhập mã sinh viên ");

        jLabel2.setText("Nhập mã học phần ");

        jButton1.setText("Đăng kí ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Học phần đã đăng kí ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Đóng ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 204, 51));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Đăng kí học phần ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jButton4.setText("Danh sách học phần ");
        jButton4.setActionCommand("Về lại trang chủ ");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton3))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(txtMaHP, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaHP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 // Lấy giá trị của MaSV và MaHP
    // Lấy giá trị của MaSV và MaHP
    String maSV = txtMaSV.getText();
    String maHP = txtMaHP.getText();

    // Thiết lập kết nối đến cơ sở dữ liệu
    Connection conn = null;
    PreparedStatement pstmt = null;
    try {
        conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=DACK;encrypt=true;trustServerCertificate=true", "hoa284", "123456@");

        // Kiểm tra trùng lặp SV_ID
        String checkSV = "SELECT COUNT(*) FROM SinhVien WHERE SV_ID = ?";
        try (PreparedStatement checkSVStatement = conn.prepareStatement(checkSV)) {
            checkSVStatement.setString(1, maSV);
            try (ResultSet svResultSet = checkSVStatement.executeQuery()) {
                if (svResultSet.next()) {
                    int svCount = svResultSet.getInt(1);
                    if (svCount == 0) {
                        JOptionPane.showMessageDialog(this, "Mã sinh viên không chính xác", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        return; // Thoát khỏi phương thức hoặc hàm để không thực hiện INSERT
                    }
                }
            }
        }

        // Kiểm tra trùng lặp HP_ID
        String checkHP = "SELECT COUNT(*) FROM HocPhan WHERE HP_ID = ?";
        try (PreparedStatement checkHPStatement = conn.prepareStatement(checkHP)) {
            checkHPStatement.setString(1, maHP);
            try (ResultSet hpResultSet = checkHPStatement.executeQuery()) {
                if (hpResultSet.next()) {
                    int hpCount = hpResultSet.getInt(1);
                    if (hpCount == 0) {
                        JOptionPane.showMessageDialog(this, "Học phần bạn muốn đăng ký không tồn tại", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        return; // Thoát khỏi phương thức hoặc hàm để không thực hiện INSERT
                    }
                }
            }
        }

        // Lấy Time_ID và Day_ID từ bảng HocPhan
        String getTimeIDQuery = "SELECT Time_ID, Day_ID FROM HocPhan WHERE HP_ID = ?";
        try (PreparedStatement getTimeIDStatement = conn.prepareStatement(getTimeIDQuery)) {
            getTimeIDStatement.setString(1, maHP);
            try (ResultSet timeIDResultSet = getTimeIDStatement.executeQuery()) {
                if (timeIDResultSet.next()) {
                    String timeID = timeIDResultSet.getString("Time_ID");
                    String dayID = timeIDResultSet.getString("Day_ID");

                    // Kiểm tra trùng lặp Time_ID, Day_ID và SV_ID trong bảng ChiTiet
                    String checkDuplicateQuery = "SELECT COUNT(*) FROM ChiTiet WHERE Time_ID = ? AND Day_ID = ? AND SV_ID = ?";
                    try (PreparedStatement checkDuplicateStatement = conn.prepareStatement(checkDuplicateQuery)) {
                        checkDuplicateStatement.setString(1, timeID);
                        checkDuplicateStatement.setString(2, dayID);
                        checkDuplicateStatement.setString(3, maSV);
                        try (ResultSet duplicateResultSet = checkDuplicateStatement.executeQuery()) {
                            if (duplicateResultSet.next()) {
                                int duplicateCount = duplicateResultSet.getInt(1);
                                if (duplicateCount > 0) {
                                    // In thông báo lỗi
                                    JOptionPane.showMessageDialog(this, "Bạn đã đăng ký môn học này rồi", "Lỗi", JOptionPane.ERROR_MESSAGE);
                                    return; // Thoát khỏi phương thức hoặc hàm để không thực hiện INSERT
                                }
                            }
                        }
                    }

                  
                    // Tạo câu truy vấn SQL để chèn dữ liệu vào bảng ChiTiet
                    String sql = "INSERT INTO ChiTiet (SV_ID, HP_ID, Time_ID, Day_ID) VALUES (?, ?, ?, ?)";

                    // Tạo PreparedStatement
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, maSV);
                    pstmt.setString(2, maHP);
                    pstmt.setString(3, timeID);
                    pstmt.setString(4, dayID);

                    // Thực thi câu truy vấn
                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        // In thông báo thành công
                        JOptionPane.showMessageDialog(this, "Đăng ký thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        // In thông báo lỗi
                        JOptionPane.showMessageDialog(this, "Đăng ký thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Học phần bạn muốn đăng ký không tồn tại", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            // Đóng kết nối với cơ sở dữ liệu
            if (pstmt != null) {
                pstmt.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
                 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        frm_Main form5 =new frm_Main();
        form5.setVisible(true);
        dispose();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        frm_DSDK form2 = new frm_DSDK();
        form2.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        frm_DSHP1 form3 =new frm_DSHP1();
        form3.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_DKHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_DKHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_DKHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_DKHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_DKHP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtMaHP;
    private javax.swing.JTextField txtMaSV;
    // End of variables declaration//GEN-END:variables
}
